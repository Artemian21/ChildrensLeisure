// <auto-generated />
using System;
using ChildrensLeisure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChildrensLeisure.DataAccess.Migrations
{
    [DbContext(typeof(ChildrensLeisureDBContext))]
    [Migration("20250315161219_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.EventProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomProgram")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("EventPrograms");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.FairyCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("FairyCharacters");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EventProgramId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderAttraction", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttractionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("AttractionId");

                    b.ToTable("OrderAttractions");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderFairyCharacter", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FairyCharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "FairyCharacterId");

                    b.HasIndex("FairyCharacterId");

                    b.ToTable("OrderFairyCharacters");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderZone", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("OrderZones");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Attraction", b =>
                {
                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Zone", "Zone")
                        .WithMany("Attractions")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Order", b =>
                {
                    b.HasOne("ChildrensLeisure.DataAccess.Entity.EventProgram", "EventProgram")
                        .WithMany()
                        .HasForeignKey("EventProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventProgram");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderAttraction", b =>
                {
                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Order", "Order")
                        .WithMany("OrderAttractions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderFairyCharacter", b =>
                {
                    b.HasOne("ChildrensLeisure.DataAccess.Entity.FairyCharacter", "FairyCharacter")
                        .WithMany()
                        .HasForeignKey("FairyCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Order", "Order")
                        .WithMany("OrderFairyCharacters")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FairyCharacter");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.OrderZone", b =>
                {
                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Order", "Order")
                        .WithMany("OrderZones")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildrensLeisure.DataAccess.Entity.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Order", b =>
                {
                    b.Navigation("OrderAttractions");

                    b.Navigation("OrderFairyCharacters");

                    b.Navigation("OrderZones");
                });

            modelBuilder.Entity("ChildrensLeisure.DataAccess.Entity.Zone", b =>
                {
                    b.Navigation("Attractions");
                });
#pragma warning restore 612, 618
        }
    }
}
